#include <iostream>
#define MAX_SIZE 101

using namespace std;

class Stack {
    private:
        int A[MAX_SIZE];
        int top;
    public:
        Stack() {
            top = -1;
        }
        void push(int x) {
            if (top == MAX_SIZE - 1) {
                cout << "Error: Stack is full\n";
                return;
            }
            A[++top] = x;
        }
        void pop() {
            if (top == -1) {
                cout << "Error: Stack is empty\n";
                return;
            }
            top--;
        }
        int peek() {
            if (top == -1) {
                cout << "Error: Stack is empty\n";
                return -1;
            }
            return A[top];
        }
        void display() {
            if (top == -1) {
                cout << "Error: Stack is empty\n";
                return;
            }
            cout << "Stack elements are:\n";
            for (int i = top; i >= 0; i--) {
                cout << A[i] << endl;
            }
        }
        bool isEmpty() {
            return top == -1;
        }
        bool isFull() {
            return top == MAX_SIZE - 1;
        }
};

int main() {
    Stack s;
    int n;
    cout << "Enter the number of elements in the stack: ";
    cin >> n;
    cout << "Enter the elements:\n";
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        s.push(x);
    }
    s.display();
    if (s.isEmpty()) {
        cout << "Stack is empty\n";
    } else {
        cout << "Stack is not empty\n";
    }
    if (s.isFull()) {
        cout << "Stack is full\n";
    } else {
        cout << "Stack is not full\n";
    }
    return 0;
}
